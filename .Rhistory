smooth()
?smooth
plot(presidents, main = "smooth(presidents0, *) :  3R and default 3RS3R")
lines(sm3, col = 3, lwd = 1.5)
lines(sm, col = 2, lwd = 1.25)
?loess
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
cars.lo <- loess(dist ~ speed, cars)
plot(predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE))
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
getAnywhere(geom_smooth)
getAnywhere(GeomSmooth)
force(stat_smooth)
View(StatSmooth)
View(GeomSmooth)
?lowess
require(graphics)
plot(cars, main = "lowess(cars)")
lines(lowess(cars), col = 2)
lines(lowess(cars, f = .2), col = 3)
legend(5, 120, c(paste("f = ", c("2/3", ".2"))), lty = 1, col = 2:3)
lw <- lowess(dist ~ speed, data=cars)
plot(lw, main="lowess(cars)"  )
data(cars)
lw <- lowess(dist ~ speed, data=cars)
plot(lw, main="lowess(cars)"  )
lw
lw <- lowess(dist ~ speed, data=cars)
plot(cars$speed, cars$dist, main="lowess(cars)")
lines(lowess(cars$speed, cars$dist), col=2)
plotLowess(dist ~ speed, data=cars, main="lowess(cars)")
# Helper functions
resampler <- function(data) {
n <- nrow(data)
resample.rows <- sample(1:n,size=n,replace=TRUE)
return(data[resample.rows,])
}
spline.estimator <- function(data,m=300) {
fit <- smooth.spline(x=data[,1],y=data[,2],cv=TRUE)
eval.grid <- seq(from=min(data[,1]),to=max(data[,1]),length.out=m)
return(predict(fit,x=eval.grid)$y) # We only want the predicted values
}
spline.cis <- function(data,B,alpha=0.05,m=300) {
spline.main <- spline.estimator(data,m=m)
spline.boots <- replicate(B,spline.estimator(resampler(data),m=m))
cis.lower <- 2*spline.main - apply(spline.boots,1,quantile,probs=1-alpha/2)
cis.upper <- 2*spline.main - apply(spline.boots,1,quantile,probs=alpha/2)
return(list(main.curve=spline.main,lower.ci=cis.lower,upper.ci=cis.upper,
x=seq(from=min(data[,1]),to=max(data[,1]),length.out=m)))
}
#sample data
data<-data.frame(x=rnorm(100), y=rnorm(100))
#run and plot
sp.cis <- spline.cis(data, B=1000,alpha=0.05)
plot(data[,1],data[,2])
lines(x=sp.cis$x,y=sp.cis$main.curve)
lines(x=sp.cis$x,y=sp.cis$lower.ci, lty=2)
lines(x=sp.cis$x,y=sp.cis$upper.ci, lty=2)
fit <- smooth.spline(data$x, data$y)      # smooth.spline fit
res <- (fit$yin - fit$y)/(1-fit$lev)      # jackknife residuals
sigma <- sqrt(var(res))                     # estimate sd
upper <- fit$y + 2.0*sigma*sqrt(fit$lev)   # upper 95% conf. band
lower <- fit$y - 2.0*sigma*sqrt(fit$lev)   # lower 95% conf. band
matplot(fit$x, cbind(upper, fit$y, lower), type="plp", pch=".")
fit
fit$x
fit$y
fit$lev
vals = c(0.665,1.561,
+ 0.701,1.99,
+ 0.71,2.118,
+ 0.767,3.834,
+ 0.801,4.602,
+ 0.807,5.199,
+ 0.825,4.255,
+ 0.831,4.818,
+ 0.891,5.064,
+ 0.902,5.283,
+ 0.928,5.344,
+ 0.97,4.691,
+ 0.973,5.055,
+ 0.98,4.937,
+ 0.997,3.752,
+ 1,3.965,
+ 1.021,3.275,
+ 1.045,2.849,
+ 1.074,2.286,
+ 1.089,1.64,
+ 1.148,0.97,
+ 1.224,0.537)
vars = c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22")
smps = c("E","NOx")
data = as.data.frame(matrix(vals, nrow = 22, ncol = 2, byrow = TRUE, dimnames = list(vars, smps)))
data
fit <- smooth.spline(data$E, data$NOx)
res <- (fit$yin - fit$y)/(1-fit$lev)      # jackknife residuals
sigma <- sqrt(var(res))                     # estimate sd
upper <- fit$y + 2.0*sigma*sqrt(fit$lev)   # upper 95% conf. band
lower <- fit$y - 2.0*sigma*sqrt(fit$lev)   # lower 95% conf. band
matplot(fit$x, cbind(upper, fit$y, lower), type="plp", pch=".")
ggplot(data, aes(E, NOx)) + geom_point() + geom_smooth()
o = ggplot(data, aes(E, NOx)) + geom_point() + geom_smooth()
ggplot_build(o)
fit$lev
?smooth.spline
smooth.spline
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
cxplot(ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth())
setwd("~/git/cxplot")
source("~/git/cxplot/cxplot.R")
cxplot(ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth())
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
# to get extrapolation
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
cars.lo2
predict(cars.lo2)
p = predict(cars.lo2)
ls(p)
p$s
p
cxplot(ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth())cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
# to get extrapolation
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
data("mpg")
loess(hwy ~ displ, mpg)
l = loess(hwy ~ displ, mpg)
ls(l)
l$fitted
predict(l)
predict(l, se = TRUE)
getAnywhere(loess)
getAnywhere(simpleLoess)
NOx = c(4.818, 2.849, 3.275, 4.691, 4.255, 5.064, 2.118, 4.602,
2.286, 0.97, 3.965, 5.344, 3.834, 1.99, 5.199, 5.283,
3.752, 0.537, 1.64, 5.055, 4.937, 1.561)
E = c(0.831, 1.045, 1.021, 0.97, 0.825, 0.891, 0.71, 0.801,
1.074, 1.148, 1, 0.928, 0.767, 0.701, 0.807, 0.902,
0.997, 1.224, 1.089, 0.973, 0.98, 0.665)
loess(E ~ NOx)
L = loess(E ~ NOx)
L$fitted
